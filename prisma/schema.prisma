generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  fullname     String
  email        String   @unique
  password     String
  displayName  String   @map("display_name")
  profileImage String?  @map("proflie_image")
  coverImage   String?  @map("cover_image")
  bio          String?  @db.MediumText
  phone        String?
  enable       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  project      Project[]
  groupProject GroupProject[]
  list         List[]
  task         Task[]
  comment      Comment[]
}

model Project {
  id          Int      @id @default(autoincrement())
  projectName String   @map("project_name")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  images       Image?   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId     Int?

  list         List[]
  groupProject GroupProject[]
}

model List {
  id        Int     @id @default(autoincrement())
  title     String
  status    Status  @default(TODO)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  task Task[]
}

enum Status {
  TODO
  INPROGRESS
  DONE
  LATE
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.MediumText
  priority    Priority  @default(MEDIUM)
  startDate   DateTime? @map("start_date")
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      Int
  Image       Image?    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId     Int?

  comment Comment[]
  webLink Weblink[]
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model Weblink {
  id     Int    @id @default(autoincrement())
  url    String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int    @map("task_id")
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    Int      @map("task_id")
}

model GroupProject {
  id        Int     @id @default(autoincrement())
  role      ROLE    @default(MEMBER)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  @@map("group_project")
}

enum ROLE {
  OWNER
  MEMBER
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @db.Timestamp(0)

  project Project[]
  task    Task[]

  @@map("image")
}
